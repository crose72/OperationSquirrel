/********************************************************************************
 * @file    path_planner.cpp
 * @author  Cameron Rose
 * @date    3/12/2025
 * @brief   The path planner contains the MPC setup and solving for the optimal
 *          flight path to deliver a payload to a moving target.  An external
 *          MPC library will be used to solve the MPC problem statement.
 ********************************************************************************/

/********************************************************************************
 * Includes
 ********************************************************************************/
#include "path_planner.h"

/********************************************************************************
 * Typedefs
 ********************************************************************************/

/********************************************************************************
 * Private macros and defines
 ********************************************************************************/
// Model dimensions
#define NX 8   // states: [x_d, y_d, v_d_x, v_d_y, x_t, y_t, x_p, y_p]
#define NU 2   // controls: [a_d_x, a_d_y]
#define NY (NX + NU)  // outputs for tracking: states + controls
#define NYN NX  // terminal outputs
#define N 20   // prediction horizon

// Gravity constant
#define GRAVITY 9.81

/********************************************************************************
 * Object definitions
 ********************************************************************************/

/********************************************************************************
 * Calibration definitions
 ********************************************************************************/

/********************************************************************************
 * Function definitions
 ********************************************************************************/

/********************************************************************************
 * Function: 
 * Description: 
 ********************************************************************************/

/********************************************************************************
 * Function: Planner
 * Description: Planner class constructor.
 ********************************************************************************/
Planner::Planner(void) {};

/********************************************************************************
 * Function: ~Planner
 * Description: Planner class destructor.
 ********************************************************************************/
Planner::~Planner(void) {};

/********************************************************************************
 * Function: init
 * Description: Initialize all planner variables.  Run once at the start
 *              of the program.
 ********************************************************************************/
bool Planner::init(void)
{


    return true;
}

/********************************************************************************
 * Function: loop
 * Description: Function to run every loop.
 ********************************************************************************/
void Planner::loop(void)
{

}

/********************************************************************************
 * Function: shutdown
 * Description: Function to clean up planner at the end of the program.
 ********************************************************************************/
void Planner::shutdown(void)
{
    
}